/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef FriendsListService_H
#define FriendsListService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "friendslistservice_types.h"

namespace friendslistservice {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class FriendsListServiceIf {
 public:
  virtual ~FriendsListServiceIf() {}
  virtual void getFriendsList(std::vector<std::string> & _return, const std::string& ID) = 0;
  virtual bool setFriend(const std::string& ID1, const std::string& ID2) = 0;
  virtual bool removeFriend(const std::string& ID1, const std::string& ID2) = 0;
};

class FriendsListServiceIfFactory {
 public:
  typedef FriendsListServiceIf Handler;

  virtual ~FriendsListServiceIfFactory() {}

  virtual FriendsListServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(FriendsListServiceIf* /* handler */) = 0;
};

class FriendsListServiceIfSingletonFactory : virtual public FriendsListServiceIfFactory {
 public:
  FriendsListServiceIfSingletonFactory(const boost::shared_ptr<FriendsListServiceIf>& iface) : iface_(iface) {}
  virtual ~FriendsListServiceIfSingletonFactory() {}

  virtual FriendsListServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(FriendsListServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<FriendsListServiceIf> iface_;
};

class FriendsListServiceNull : virtual public FriendsListServiceIf {
 public:
  virtual ~FriendsListServiceNull() {}
  void getFriendsList(std::vector<std::string> & /* _return */, const std::string& /* ID */) {
    return;
  }
  bool setFriend(const std::string& /* ID1 */, const std::string& /* ID2 */) {
    bool _return = false;
    return _return;
  }
  bool removeFriend(const std::string& /* ID1 */, const std::string& /* ID2 */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _FriendsListService_getFriendsList_args__isset {
  _FriendsListService_getFriendsList_args__isset() : ID(false) {}
  bool ID :1;
} _FriendsListService_getFriendsList_args__isset;

class FriendsListService_getFriendsList_args {
 public:

  FriendsListService_getFriendsList_args(const FriendsListService_getFriendsList_args&);
  FriendsListService_getFriendsList_args& operator=(const FriendsListService_getFriendsList_args&);
  FriendsListService_getFriendsList_args() : ID() {
  }

  virtual ~FriendsListService_getFriendsList_args() throw();
  std::string ID;

  _FriendsListService_getFriendsList_args__isset __isset;

  void __set_ID(const std::string& val);

  bool operator == (const FriendsListService_getFriendsList_args & rhs) const
  {
    if (!(ID == rhs.ID))
      return false;
    return true;
  }
  bool operator != (const FriendsListService_getFriendsList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FriendsListService_getFriendsList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FriendsListService_getFriendsList_pargs {
 public:


  virtual ~FriendsListService_getFriendsList_pargs() throw();
  const std::string* ID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FriendsListService_getFriendsList_result__isset {
  _FriendsListService_getFriendsList_result__isset() : success(false) {}
  bool success :1;
} _FriendsListService_getFriendsList_result__isset;

class FriendsListService_getFriendsList_result {
 public:

  FriendsListService_getFriendsList_result(const FriendsListService_getFriendsList_result&);
  FriendsListService_getFriendsList_result& operator=(const FriendsListService_getFriendsList_result&);
  FriendsListService_getFriendsList_result() {
  }

  virtual ~FriendsListService_getFriendsList_result() throw();
  std::vector<std::string>  success;

  _FriendsListService_getFriendsList_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const FriendsListService_getFriendsList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FriendsListService_getFriendsList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FriendsListService_getFriendsList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FriendsListService_getFriendsList_presult__isset {
  _FriendsListService_getFriendsList_presult__isset() : success(false) {}
  bool success :1;
} _FriendsListService_getFriendsList_presult__isset;

class FriendsListService_getFriendsList_presult {
 public:


  virtual ~FriendsListService_getFriendsList_presult() throw();
  std::vector<std::string> * success;

  _FriendsListService_getFriendsList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FriendsListService_setFriend_args__isset {
  _FriendsListService_setFriend_args__isset() : ID1(false), ID2(false) {}
  bool ID1 :1;
  bool ID2 :1;
} _FriendsListService_setFriend_args__isset;

class FriendsListService_setFriend_args {
 public:

  FriendsListService_setFriend_args(const FriendsListService_setFriend_args&);
  FriendsListService_setFriend_args& operator=(const FriendsListService_setFriend_args&);
  FriendsListService_setFriend_args() : ID1(), ID2() {
  }

  virtual ~FriendsListService_setFriend_args() throw();
  std::string ID1;
  std::string ID2;

  _FriendsListService_setFriend_args__isset __isset;

  void __set_ID1(const std::string& val);

  void __set_ID2(const std::string& val);

  bool operator == (const FriendsListService_setFriend_args & rhs) const
  {
    if (!(ID1 == rhs.ID1))
      return false;
    if (!(ID2 == rhs.ID2))
      return false;
    return true;
  }
  bool operator != (const FriendsListService_setFriend_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FriendsListService_setFriend_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FriendsListService_setFriend_pargs {
 public:


  virtual ~FriendsListService_setFriend_pargs() throw();
  const std::string* ID1;
  const std::string* ID2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FriendsListService_setFriend_result__isset {
  _FriendsListService_setFriend_result__isset() : success(false) {}
  bool success :1;
} _FriendsListService_setFriend_result__isset;

class FriendsListService_setFriend_result {
 public:

  FriendsListService_setFriend_result(const FriendsListService_setFriend_result&);
  FriendsListService_setFriend_result& operator=(const FriendsListService_setFriend_result&);
  FriendsListService_setFriend_result() : success(0) {
  }

  virtual ~FriendsListService_setFriend_result() throw();
  bool success;

  _FriendsListService_setFriend_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const FriendsListService_setFriend_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FriendsListService_setFriend_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FriendsListService_setFriend_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FriendsListService_setFriend_presult__isset {
  _FriendsListService_setFriend_presult__isset() : success(false) {}
  bool success :1;
} _FriendsListService_setFriend_presult__isset;

class FriendsListService_setFriend_presult {
 public:


  virtual ~FriendsListService_setFriend_presult() throw();
  bool* success;

  _FriendsListService_setFriend_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FriendsListService_removeFriend_args__isset {
  _FriendsListService_removeFriend_args__isset() : ID1(false), ID2(false) {}
  bool ID1 :1;
  bool ID2 :1;
} _FriendsListService_removeFriend_args__isset;

class FriendsListService_removeFriend_args {
 public:

  FriendsListService_removeFriend_args(const FriendsListService_removeFriend_args&);
  FriendsListService_removeFriend_args& operator=(const FriendsListService_removeFriend_args&);
  FriendsListService_removeFriend_args() : ID1(), ID2() {
  }

  virtual ~FriendsListService_removeFriend_args() throw();
  std::string ID1;
  std::string ID2;

  _FriendsListService_removeFriend_args__isset __isset;

  void __set_ID1(const std::string& val);

  void __set_ID2(const std::string& val);

  bool operator == (const FriendsListService_removeFriend_args & rhs) const
  {
    if (!(ID1 == rhs.ID1))
      return false;
    if (!(ID2 == rhs.ID2))
      return false;
    return true;
  }
  bool operator != (const FriendsListService_removeFriend_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FriendsListService_removeFriend_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FriendsListService_removeFriend_pargs {
 public:


  virtual ~FriendsListService_removeFriend_pargs() throw();
  const std::string* ID1;
  const std::string* ID2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FriendsListService_removeFriend_result__isset {
  _FriendsListService_removeFriend_result__isset() : success(false) {}
  bool success :1;
} _FriendsListService_removeFriend_result__isset;

class FriendsListService_removeFriend_result {
 public:

  FriendsListService_removeFriend_result(const FriendsListService_removeFriend_result&);
  FriendsListService_removeFriend_result& operator=(const FriendsListService_removeFriend_result&);
  FriendsListService_removeFriend_result() : success(0) {
  }

  virtual ~FriendsListService_removeFriend_result() throw();
  bool success;

  _FriendsListService_removeFriend_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const FriendsListService_removeFriend_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FriendsListService_removeFriend_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FriendsListService_removeFriend_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FriendsListService_removeFriend_presult__isset {
  _FriendsListService_removeFriend_presult__isset() : success(false) {}
  bool success :1;
} _FriendsListService_removeFriend_presult__isset;

class FriendsListService_removeFriend_presult {
 public:


  virtual ~FriendsListService_removeFriend_presult() throw();
  bool* success;

  _FriendsListService_removeFriend_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class FriendsListServiceClient : virtual public FriendsListServiceIf {
 public:
  FriendsListServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  FriendsListServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getFriendsList(std::vector<std::string> & _return, const std::string& ID);
  void send_getFriendsList(const std::string& ID);
  void recv_getFriendsList(std::vector<std::string> & _return);
  bool setFriend(const std::string& ID1, const std::string& ID2);
  void send_setFriend(const std::string& ID1, const std::string& ID2);
  bool recv_setFriend();
  bool removeFriend(const std::string& ID1, const std::string& ID2);
  void send_removeFriend(const std::string& ID1, const std::string& ID2);
  bool recv_removeFriend();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class FriendsListServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<FriendsListServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (FriendsListServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getFriendsList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setFriend(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_removeFriend(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  FriendsListServiceProcessor(boost::shared_ptr<FriendsListServiceIf> iface) :
    iface_(iface) {
    processMap_["getFriendsList"] = &FriendsListServiceProcessor::process_getFriendsList;
    processMap_["setFriend"] = &FriendsListServiceProcessor::process_setFriend;
    processMap_["removeFriend"] = &FriendsListServiceProcessor::process_removeFriend;
  }

  virtual ~FriendsListServiceProcessor() {}
};

class FriendsListServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  FriendsListServiceProcessorFactory(const ::boost::shared_ptr< FriendsListServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< FriendsListServiceIfFactory > handlerFactory_;
};

class FriendsListServiceMultiface : virtual public FriendsListServiceIf {
 public:
  FriendsListServiceMultiface(std::vector<boost::shared_ptr<FriendsListServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~FriendsListServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<FriendsListServiceIf> > ifaces_;
  FriendsListServiceMultiface() {}
  void add(boost::shared_ptr<FriendsListServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getFriendsList(std::vector<std::string> & _return, const std::string& ID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getFriendsList(_return, ID);
    }
    ifaces_[i]->getFriendsList(_return, ID);
    return;
  }

  bool setFriend(const std::string& ID1, const std::string& ID2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setFriend(ID1, ID2);
    }
    return ifaces_[i]->setFriend(ID1, ID2);
  }

  bool removeFriend(const std::string& ID1, const std::string& ID2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->removeFriend(ID1, ID2);
    }
    return ifaces_[i]->removeFriend(ID1, ID2);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class FriendsListServiceConcurrentClient : virtual public FriendsListServiceIf {
 public:
  FriendsListServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  FriendsListServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getFriendsList(std::vector<std::string> & _return, const std::string& ID);
  int32_t send_getFriendsList(const std::string& ID);
  void recv_getFriendsList(std::vector<std::string> & _return, const int32_t seqid);
  bool setFriend(const std::string& ID1, const std::string& ID2);
  int32_t send_setFriend(const std::string& ID1, const std::string& ID2);
  bool recv_setFriend(const int32_t seqid);
  bool removeFriend(const std::string& ID1, const std::string& ID2);
  int32_t send_removeFriend(const std::string& ID1, const std::string& ID2);
  bool recv_removeFriend(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
