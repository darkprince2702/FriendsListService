// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "FriendsListService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <thrift/server/TNonblockingServer.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace ::friendslistservice;

class FriendsListServiceHandler : virtual public FriendsListServiceIf {
public:

    FriendsListServiceHandler() {
        // Your initialization goes here
    }

    void getFriendsList(std::vector<std::string> & _return, const std::string& ID) {
        // Your implementation goes here
        printf("getFriendsList\n");
    }

    bool setFriend(const std::string& ID1, const std::string& ID2) {
        // Your implementation goes here
        printf("setFriend\n");
    }

    bool removeFriend(const std::string& ID1, const std::string& ID2) {
        // Your implementation goes here
        printf("removeFriend\n");
    }

};

int main(int argc, char **argv) {
    int port = 9090;
    shared_ptr<FriendsListServiceHandler> handler(new FriendsListServiceHandler());
    shared_ptr<TProcessor> processor(new FriendsListServiceProcessor(handler));
    shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
    shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
    shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

    int ioThreadsNum = 2;
    int workerThreadsNum = 4;

    boost::shared_ptr<ThreadManager> threadManager =
            ThreadManager::newSimpleThreadManager((size_t) workerThreadsNum);
    boost::shared_ptr<PlatformThreadFactory> threadFactory(new PlatformThreadFactory());
    threadManager->threadFactory(threadFactory);
    threadManager->start();

    TNonblockingServer server(processor, protocolFactory, port, threadManager);
    server.setNumIOThreads(ioThreadsNum);
    server.serve();
    return 0;
}

